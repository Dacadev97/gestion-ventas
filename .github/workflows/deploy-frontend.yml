name: Deploy Frontend to Cloud Run

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Deploy Backend to Cloud Run"]
    types:
      - completed
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Solo ejecutar si el workflow de backend fue exitoso o si es manual
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.CLOUD_RUN_REGION }}-docker.pkg.dev --quiet

      - name: Build and push frontend image
        working-directory: frontend
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REGION: ${{ secrets.CLOUD_RUN_REGION }}
          REPO: ${{ secrets.ARTIFACT_REGISTRY_REPO_FRONTEND }}
          SERVICE: ${{ secrets.CLOUD_RUN_SERVICE_FRONTEND }}
          BACKEND_URL: ${{ secrets.BACKEND_URL }}
        run: |
          IMAGE_URI=${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${SERVICE}:${GITHUB_SHA}
          echo "Building ${IMAGE_URI}"
          docker build \
            --build-arg VITE_API_BASE_URL=${BACKEND_URL} \
            -t ${IMAGE_URI} .
          docker push ${IMAGE_URI}
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV

      - name: Deploy Frontend to Cloud Run
        env:
          REGION: ${{ secrets.CLOUD_RUN_REGION }}
          SERVICE: ${{ secrets.CLOUD_RUN_SERVICE_FRONTEND }}
        run: |
          gcloud run deploy ${SERVICE} \
            --image ${IMAGE_URI} \
            --region ${REGION} \
            --platform managed \
            --allow-unauthenticated \
            --memory 256Mi \
            --cpu 1 \
            --timeout 60 \
            --max-instances 10 \
            --min-instances 0 \
            --port 80
